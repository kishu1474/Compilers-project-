main() =>
  exp("(4-5)*3",[],Val),
  println(Val).

% Exp --> Exp + Term | Exp - Term | Term
table
exp(Si,So,Val) ?=>
  exp(Si,S1,Val1),
  S1 = [Op|S2],
  (Op == '+' || Op == '-'), 
  term(S2,So,Val2),
  Val = my_apply(Op,Val1,Val2).

exp(Si,So,Val) =>
  term(Si,So,Val).


% Term --> Term * Fact  | Fact
table
term(Si,So,Val) ?=>
  term(Si,S1,Val1),
  S1 = [Op|S2],
  (Op == '*'),
  fact(S2,So,Val2),
  Val = my_apply(Op,Val1,Val2).

term(Si,So,Val) =>
  fact(Si,So,Val).


% Fact --> ( Exp ) | - Fact | + Fact | Literal | Identifier
fact(['('|Si],So,Val) =>
  exp(Si,S1,Val),
  S1 = [')'|So].

fact(['-'|Si],So,Val) =>
  fact(Si,So,Val).

fact(['+'|Si],So,Val) =>
  fact(Si,So,Val).

fact(Si,So,Val) =>
  literal(Si,So,Val).

fact(Si,So,Val) =>
  identifier(Si,So,Val).


% Identifier --> Letter [Letter | Digit]*
identifier([X|''],So,Val) =>
    letter(X,So,Val).

identifier(Si,So,Val) =>
    letter(Si,So,Val).

identifier(Si,So,Val) =>
    digit(Si,So,Val).


% Letter --> a|...|z|A|...|Z|_
letter([Token|Si],So,Val),
    ascii_alpha(Token)
=>
    So = Si,
    Val = Token.


% Literal --> 0 | NonZeroDigit Digit*
literal(['0'|''],So,Val) =>
  So = '',
  Val = ord('0') - ord('0').

literal([Token|''],So,Val) ,
  ascii_digit(Token)  
=>
    nonzerodigit(Token,So,Val).

literal(Si,So,Val) =>
    digit(Si,So,Val).


% NonZeroDigit --> 1|...|9
nonzerodigit([Token|Si],So,Val),
    ascii_digit(Token)
=>
    So = Si,
    println(Token),
    if(Token = 0) then
       fail   
    else 
	Val = ord(Token) - ord('0')
    end.



% Digit --> 0|1|...|9
digit([Token|Si],So,Val),
    ascii_digit(Token)
=> 
    So = Si,
    Val = ord(Token) - ord('0').


my_apply('+',X,Y) = X+Y.
my_apply('-',X,Y) = X-Y.
my_apply('*',X,Y) = X*Y.
